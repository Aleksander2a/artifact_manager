// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using manager_artefaktow.Data;

namespace manager_artefaktow.Migrations
{
    [DbContext(typeof(ManagerContext))]
    [Migration("20220515175920_ArtifactManagerDatabase")]
    partial class ArtifactManagerDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("manager_artefaktow.Data.Models.Category", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AncestoresNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryName");

                    b.HasIndex("CreatorName");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.CategoryProperty", b =>
                {
                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PropertyName", "CategoryName");

                    b.HasIndex("CategoryName");

                    b.ToTable("CategoryProperties");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.Instance", b =>
                {
                    b.Property<string>("InstanceName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstanceName");

                    b.HasIndex("CategoryName");

                    b.HasIndex("CreatorName");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.InstancePropertyValue", b =>
                {
                    b.Property<string>("PropertyValue")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstanceName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PropertyValue", "PropertyName", "InstanceName");

                    b.HasIndex("InstanceName");

                    b.ToTable("InstanceProperties");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.Permission", b =>
                {
                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionName");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.Role", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleName");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleName", "PermissionName");

                    b.HasIndex("PermissionName");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserName");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.Category", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.User", "Creator")
                        .WithMany("Categories")
                        .HasForeignKey("CreatorName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.CategoryProperty", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.Instance", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.Category", "Category")
                        .WithMany("Instances")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("manager_artefaktow.Data.Models.User", "Creator")
                        .WithMany("Instances")
                        .HasForeignKey("CreatorName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.InstancePropertyValue", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.Instance", "Instance")
                        .WithMany("PropertyValues")
                        .HasForeignKey("InstanceName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.RolePermission", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("manager_artefaktow.Data.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("manager_artefaktow.Data.Models.User", b =>
                {
                    b.HasOne("manager_artefaktow.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
